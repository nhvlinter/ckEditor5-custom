<?php
namespace salesteck\Email;

use Content\Image;
use League\OAuth2\Client\Provider\Google;
use PHPMailer\PHPMailer\OAuth;
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\SMTP;
use salesteck\utils\CustomDateTime;
use salesteck\utils\Debug;
use salesteck\utils\File;

/**
 * Created by PhpStorm.
 * User: Son
 * Date: 15-10-19
 * Time: 18:13
 */
/**
 * SMTP needs accurate times, and the PHP time zone MUST be set
 * This should be done in your php.ini, but this is how to do it if you don't have access to that
 */
date_default_timezone_set(CustomDateTime::DEFAULT_TIME_ZONE);
class EmailGoogle extends PHPMailer implements \JsonSerializable
{
    private static $config;
    private const debug = false;

    public const CONFIG_PATH = "/src/class/__Email/email.json";

    private $configLoaded;

    /**
     * Email constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->isSMTP();

        $this->SMTPDebug = SMTP::DEBUG_OFF;
        if(self::debug){
            $this->SMTPDebug = SMTP::DEBUG_SERVER;
        }
        $this->isSMTP();

        //Set the encryption mechanism to use - STARTTLS or SMTPS
        //Whether to use SMTP authentication
        $this->SMTPAuth = true;
        //Set AuthType to use XOAUTH2
        $this->AuthType = 'XOAUTH2';

        $this->CharSet = PHPMailer::CHARSET_UTF8;
        $this->addEmbeddedImage(File::_getFileFullPath(Image::LOGO_PATH), EmailContent::CID_LOGO);
        $configEmail = self::_getConfigFile();
        if(isset($configEmail->email)){
            $emailInstance = $configEmail->email;

            $provider = isset($emailInstance->provider) ? $emailInstance->provider : "";
            $clientId = isset($emailInstance->appClientId) ? $emailInstance->appClientId : "";
            $clientSecret = isset($emailInstance->appClientSecret) ? $emailInstance->appClientSecret : "";
            $refreshToken = isset($emailInstance->refreshToken) ? $emailInstance->refreshToken : "";
            $address = isset($emailInstance->address) ? $emailInstance->address : "";
            $host = isset($emailInstance->host) ? $emailInstance->host : "";
            $port = isset($emailInstance->port) ? $emailInstance->port : 465;
            $encryption = isset($emailInstance->encryption) ? $emailInstance->encryption : PHPMailer::ENCRYPTION_SMTPS;

            //Set the hostname of the mail server
            $this->Host = $host;
            //Set the SMTP port number - 587 for authenticated TLS, a.k.a. RFC4409 SMTP submission
            $this->Port = $port;

            $this->SMTPSecure = $encryption;

            if(
                $clientId !== "" && $clientSecret !== "" &&
                $refreshToken !== "" && $address !== "" &&
                $host !== ""  && $encryption !== ""
            ){
                $provider = new Google(
                    [
                        'clientId' => $clientId,
                        'clientSecret' => $clientSecret,
                    ]
                );
                //Pass the OAuth provider instance to PHPMailer
                $this->setOAuth(
                    new OAuth(
                        [
                            'provider' => $provider,
                            'clientId' => $clientId,
                            'clientSecret' => $clientSecret,
                            'refreshToken' => $refreshToken,
                            'userName' => $address,
                        ]
                    )
                );
                $this->setFrom($address, "Salesteck");
                $this->configLoaded = true;
            }else{
                $this->configLoaded = false;
            }



            Debug::_exposeVariableHtml(
                [
                    "configEmail" => $configEmail
                ], false
            );
        }


        Debug::_exposeVariableHtml(
            [
                EmailGoogle::class => $this,
            ], false
        );
    }

    /**
     * @return bool
     */
    public function isConfigLoaded(): bool
    {
        return $this->configLoaded;
    }

    /**
     * @param bool $configLoaded
     */
    public function setConfigLoaded(bool $configLoaded)
    {
        $this->configLoaded = $configLoaded;
    }

    public function send()
    {
        if(self::isConfigLoaded()){
            return parent::send(); // TODO: Change the autogenerated stub
        }
        return false;
    }


    public static function _getConfigFile(){
        if(self::$config === null){
            self::$config = json_decode(File::_fileGetContent(EmailGoogle::CONFIG_PATH));;
        }
        return self::$config;
    }


    /**
     * Specify data which should be serialized to JSON
     * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed data which can be serialized by <b>json_encode</b>,
     * which is a value of any type other than a resource.
     * @since 5.4.0
     */
    public function jsonSerialize()
    {
        return get_object_vars($this);
    }
}